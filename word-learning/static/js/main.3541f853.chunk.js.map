{"version":3,"sources":["components/list-of-words.tsx","components/font-size-buttns/font-size-buttons.tsx","App.tsx","utils.ts","index.tsx"],"names":["ListOfWords","stateOfRows","values","fontSize","onClick","event","data","setActiveTabsArr","state","includes","index","filter","el","useEffect","type","map","id","useState","activeTabsArr","Accordion","fluid","styled","idx","word","translate","key","style","Title","padding","paddingBottom","active","Icon","name","Content","paddingLeft","paddingTop","FontSizeButtons","callBack","setFontSize","Button","Group","val","Or","text","positive","App","setStateOfRows","words","setWords","Grid","columns","stackable","Column","width","position","Segment","className","content","primary","sort","Math","random","secondary","Form","onSubmit","target","elements","value","replace","split","trim","reduce","acc","next","mapCurrentItem","currentIdx","arr","currentRow","toString","TextArea","placeholder","minHeight","warning","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3541f853.chunk.js","sourcesContent":["import React, { useEffect, useState, Fragment } from 'react';\nimport { Accordion, Icon } from 'semantic-ui-react'\nimport { AccordionTitleProps } from 'semantic-ui-react/dist/commonjs/modules/Accordion/AccordionTitle';\n\n\nexport interface IListOfWords {\n    stateOfRows: { type: 'open' | 'close' },\n    values: { word: string, translate: string, id: string }[]\n    fontSize: string\n}\n\nexport const ListOfWords: React.FC<IListOfWords> = ({ stateOfRows, values, fontSize }) => {\n    const onClick = (event: React.MouseEvent<HTMLDivElement>, data: AccordionTitleProps) => {\n        setActiveTabsArr((state) => {\n            if (state?.includes(+data.index!)) {\n                return state?.filter((el) => el !== +data.index!)\n            } else {\n                return [...state, +data.index!]\n            }\n        })\n    }\n\n    useEffect(() => {\n        if (stateOfRows.type === 'close') {\n            setActiveTabsArr([])\n        }\n        if (stateOfRows.type === 'open') {\n            setActiveTabsArr(values.map((el) => +el.id))\n        }\n    }, [stateOfRows])\n    const [activeTabsArr, setActiveTabsArr] = useState<number[]>([])\n\n    return (\n        <Accordion fluid styled>\n            {\n\n                values.map(({ word, translate, id }, idx) => (\n                        <div key={ id } style={ { fontSize } }>\n                            <Accordion.Title style={ { padding: '5px', paddingBottom: '0px' } }\n                                             active={ activeTabsArr?.includes(+id) }\n                                             index={ id }\n                                             onClick={ onClick }\n                            >\n                                <Icon name='dropdown'/>\n                                { word }\n                            </Accordion.Title>\n                            <Accordion.Content style={ { padding: '5px', paddingLeft: '30px', paddingTop: '0px' } }\n                                               active={ activeTabsArr?.includes(+id) }>\n                                <p>\n                                    { translate }\n                                </p>\n                            </Accordion.Content>\n                        </div>\n                    )\n                )\n            }\n\n        </Accordion>\n    )\n}\n","import React, { useEffect, useState } from 'react';\nimport { Button } from 'semantic-ui-react'\nimport './font-size-buttons.css'\n\nexport interface IFontSizeButtons {\n    callBack: (arg: string) => void\n}\n\nexport const FontSizeButtons: React.FC<IFontSizeButtons> = ({ callBack }) => {\n    const [fontSize, setFontSize] = useState(20)\n    useEffect(() => {\n        callBack(fontSize + 'px')\n    }, [fontSize])\n    const onPlusFontSize = () => {\n        setFontSize(val => val + 1)\n    }\n    const onMinusFontSize = () => {\n        setFontSize(val => val - 1)\n    }\n    return (\n        <Button.Group >\n            <Button onClick={ onPlusFontSize }>+ FontSize</Button>\n            <Button.Or text={ fontSize }/>\n            <Button onClick={ onMinusFontSize } positive>- FontSize</Button>\n        </Button.Group>\n    )\n\n}\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport 'semantic-ui-css/semantic.min.css'\nimport { ListOfWords } from './components/list-of-words';\nimport { Segment, Button, Form, TextArea, Card, Header, Grid } from 'semantic-ui-react';\nimport { FormProps } from 'semantic-ui-react/dist/commonjs/collections/Form/Form';\nimport { stringToVocabulary } from './utils';\nimport { FontSizeButtons } from './components/font-size-buttns/font-size-buttons';\n\nfunction App() {\n    const [stateOfRows, setStateOfRows] = useState<{ type: 'open' | 'close' }>({ type: 'close' })\n    const [words, setWords] = useState<{ word: string, translate: string, id: string }[]>()\n    const [fontSize, setFontSize] = useState('20px')\n\n    const onFormSubmit = (event: React.FormEvent<HTMLFormElement>, data: FormProps) => {\n        // @ts-ignore\n        setWords(stringToVocabulary(event.target.elements[0].value))\n    }\n    const onShuffleWords = () => {\n        setWords((state) => [...state!.sort(() => Math.random() - 0.5)])\n    }\n    const onSwapWordToTranslate = () => {\n        setWords(state => state?.map(el => ({ ...el, word: el.translate, translate: el.word })))\n    }\n    return (\n        <>\n            <Grid columns={ 2 } stackable>\n                <Grid.Column width={ 3 }>\n                    {\n                        words && (\n                            <div style={ { position: 'fixed' } }>\n                                <Segment className={ 'action-buttons' }>\n                                    <FontSizeButtons callBack={ setFontSize }/>\n                                    <Button content='Shuffle' primary onClick={ onShuffleWords }/>\n                                    <Button content='Swap' primary onClick={ onSwapWordToTranslate }/>\n                                </Segment>\n                                <Segment className={ 'action-buttons' }>\n                                    <div>\n                                        <Button\n                                            content='Open All'\n                                            primary\n                                            onClick={ () => setStateOfRows({ type: 'open' }) }/>\n                                        <Button\n                                            content='Close All'\n                                            secondary\n                                            onClick={ () => setStateOfRows({ type: 'close' }) }/>\n                                    </div>\n                                </Segment>\n                            </div>\n                        )\n                    }\n\n                </Grid.Column>\n                <Grid.Column>\n                    {\n                        words && (\n                            <Segment.Group>\n\n                                <Segment>\n                                    <ListOfWords\n                                        stateOfRows={ stateOfRows }\n                                        values={ words }\n                                        fontSize={ fontSize }/>\n                                </Segment>\n                            </Segment.Group>\n                        )\n                    }\n                    <Segment>\n                        <Form onSubmit={ onFormSubmit }>\n                            <TextArea\n                                name={ 'text-area' }\n                                placeholder='Tell us more' style={ { minHeight: 100 } }/>\n                            <Button content='Submit' warning type={ 'submit' }/>\n                        </Form>\n                    </Segment>\n                </Grid.Column>\n            </Grid>\n\n\n        </>\n    );\n}\n\nexport default App;\n","export const stringToVocabulary = (vocabulary: string) => {\n    //   const vocabulary = `\n    // straight - длинные\n    // wavy - волнистые\n    // mustache - усы\n// `\n    return vocabulary\n        .replace(/ — /, '-')\n        .split('-')\n        .map((el) => el.trim())\n        .reduce((acc: string[], next: string) => {\n            const mapCurrentItem = next\n                .split('\\n')\n                .map((el) => el.trim())\n                .filter((el) => !!el)\n            return [...acc, ...mapCurrentItem]\n        }, [])\n        .reduce((acc: { word: string, translate: string, id: string }[], next, currentIdx, arr) => {\n            let currentRow = {} as { word: string, translate: string, id: string }\n            if (currentIdx % 2 !== 0) {\n                currentRow = { word: arr[currentIdx - 1], translate: arr[currentIdx], id: currentIdx.toString() }\n            }\n            return currentRow.word\n                ? [\n                    ...acc,\n                    currentRow\n                ]\n                : acc\n        }, [])\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}